using Microsoft.VisualStudio.TestTools.UnitTesting;
using Newtonsoft.Json.Linq;
using SaaS.Api.Test.Models.Api.Oauth;
using System;
using System.Diagnostics;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using System.Linq;

namespace SaaS.Api.Test
{
    internal class OAuthHelper
    {
        protected static readonly AppSettings _appSettings = new AppSettings();

        private static HttpClient CreateHttpClient()
        {
            var client = new HttpClient();

            client.BaseAddress = _appSettings.PathToOAuthApi;
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            return client;
        }

        private static async Task<HttpClient> CreateHttpClientAuthorized(string accessToken = "")
        {
            if (string.IsNullOrEmpty(accessToken))
            {
                TokenResultModel token = await SignIn();
                accessToken = token.access_token;
            }

            return await Task.Run(() =>
            {
                var client = CreateHttpClient();
                client.DefaultRequestHeaders.Add("Authorization", string.Format("bearer {0}", accessToken));

                return client;
            });
        }

        internal static async Task<HttpResponseMessage> SignIn(string login, string password, string token = "")
        {
            login = Uri.EscapeDataString(login);
            password = Uri.EscapeDataString(password);

            var builder = new StringBuilder("grant_type=password");
            builder.AppendFormat("&username={0}", login);
            builder.AppendFormat("&password={0}", password);
            builder.AppendFormat("&token={0}", token);
            builder.AppendFormat("&client_id={0}", _appSettings.ClientId);
            builder.AppendFormat("&client_secret={0}", _appSettings.ClientSecret);
            builder.AppendFormat("&scope={0}", _appSettings.Scope);
            builder.AppendFormat("&motherboardKey={0}", "..CN7220043600EA.");
            builder.AppendFormat("&physicalMac={0}", "34:17:EB:98:1A:45");
            builder.AppendFormat("&machineKey={0}", "5C4C4544-0056-4A10-8059-B1C04F4E3032");
            builder.AppendFormat("&pcName={0}", "D01505");
            builder.AppendFormat("&isAutogeneratedMachineKey=false");

            using (var client = CreateHttpClient())
            {
                client.DefaultRequestHeaders.Accept.Clear();

                var request = new HttpRequestMessage(HttpMethod.Post, "api/token");
                request.Content = new StringContent(builder.ToString(), Encoding.UTF8, "application/x-www-form-urlencoded");

                var response = await client.SendAsync(request);

                string json = await response.Content.ReadAsStringAsync();
                Debug.WriteLine("Response status code: {0}", response.StatusCode);

                return response;
            }
        }

        private static async Task<HttpResponseMessage> ReSignIn(string login, string password)
        {
            var response = await SignIn(login, password);
            Assert.IsTrue(response.IsSuccessStatusCode);

            var json = await response.Content.ReadAsStringAsync();

            var token = await response.Content.ReadAsAsync<TokenResultModel>();

            response = await RefreshToken(token.refresh_token);
            token = await response.Content.ReadAsAsync<TokenResultModel>();

            using (var client = await CreateHttpClientAuthorized(token.access_token))
            {
                var productsResponse = await client.GetAsync("api/account/products");
                Assert.IsTrue(response.IsSuccessStatusCode);

                var products = await productsResponse.Content.ReadAsAsync<AccountProductResultModel[]>();
                

                var productResponse = await client.PostAsync(string.Format("api/token/{0}", "d74af15c-6d02-4ddd-8df5-ab542d93508c"), null);
                Assert.IsTrue(productResponse.IsSuccessStatusCode);

                return productResponse;
            }
        }

        internal static async Task<HttpResponseMessage> RefreshToken(string refreshToken)
        {
            refreshToken = Uri.EscapeDataString(refreshToken);

            var builder = new StringBuilder("grant_type=refresh_token");
            builder.AppendFormat("&refresh_token={0}", refreshToken);
            builder.AppendFormat("&client_id={0}", _appSettings.ClientId);
            builder.AppendFormat("&client_secret={0}", _appSettings.ClientSecret);

            HttpStatusCode httpStatus = HttpStatusCode.OK;
            string json = string.Empty;
            using (var client = CreateHttpClient())
            {
                client.DefaultRequestHeaders.Accept.Clear();

                var request = new HttpRequestMessage(HttpMethod.Post, "api/token");
                request.Content = new StringContent(builder.ToString(), Encoding.UTF8, "application/x-www-form-urlencoded");

                var response = await client.SendAsync(request);

                httpStatus = response.StatusCode;

                json = await response.Content.ReadAsStringAsync();
                Debug.WriteLine("Response status code: {0}", response.StatusCode);

                return response;
            }
        }

        internal static RegisterViewModel RegisterViewModel()
        {
            var guid = Guid.NewGuid();

            return new RegisterViewModel()
            {
                Email = _appSettings.Login,
                Password = _appSettings.Password,
                FirstName = string.Format("FirstName - {0}", guid),
                LastName = string.Format("LastName - {0}", guid)
            };
        }

        internal static RegisterViewModel CreateRandomRegisterViewModel()
        {
            var guid = Guid.NewGuid();

            return new RegisterViewModel()
            {
                Email = string.Format("{0}@gmail.com", guid),
                Password = "qwerty123",
                FirstName = string.Format("FirstName - {0}", guid),
                LastName = string.Format("LastName - {0}", guid)
            };
        }

        internal static async Task<HttpResponseMessage> Register(RegisterViewModel model)
        {
            using (var client = CreateHttpClient())
            {
                var response = await client.PostAsJsonAsync("api/account/register", model);
                string json = await response.Content.ReadAsStringAsync();
                Debug.WriteLine("Response status code: {0}", response.StatusCode);

                return response;
            }
        }

        internal static async Task<HttpResponseMessage> RegisterAnonymous()
        {
            using (var client = CreateHttpClient())
            {
                var response = await client.PostAsJsonAsync("api/account/register-anonymous", new { password = "anatole64", client_id = "saas" });
                string json = await response.Content.ReadAsStringAsync();
                Debug.WriteLine("Response status code: {0}", response.StatusCode);

                return response;
            }
        }

        internal static async Task<HttpResponseMessage> SendActivationEmail(AuthViewModel model)
        {
            using (var client = CreateHttpClient())
            {
                var response = await client.PostAsJsonAsync<AuthViewModel>("api/account/send-activation-email", model);
                string json = await response.Content.ReadAsStringAsync();
                Debug.WriteLine("Response status code: {0}", response.StatusCode);

                return response;
            }
        }

        internal static async Task<TokenResultModel> SignIn()
        {
            var response = await SignIn(_appSettings.Login, _appSettings.Password, _appSettings.Token);
            var json = await response.Content.ReadAsStringAsync();

            Assert.IsTrue(response.IsSuccessStatusCode);

            return await response.Content.ReadAsAsync<TokenResultModel>();
        }
        internal static async Task<HttpResponseMessage> Logout()
        {
            TokenResultModel token = await SignIn();

            return await Logout(token.access_token, token.refresh_token);
        }

        internal static async Task<HttpResponseMessage> Logout(string accessToken, string refreshToken)
        {
            using (var client = await CreateHttpClientAuthorized(accessToken))
                return await client.DeleteAsync(string.Format("api/token/{0}", refreshToken));
        }


        internal static async Task<TokenResultModel> ReSignIn()
        {
            var response = await ReSignIn(_appSettings.Login, _appSettings.Password);
            var json = await response.Content.ReadAsStringAsync();

            Assert.IsTrue(response.IsSuccessStatusCode);

            return await response.Content.ReadAsAsync<TokenResultModel>();
        }

        internal static async Task<HttpResponseMessage> ChangePassword(ChangePasswordViewModel model)
        {
            using (var client = await CreateHttpClientAuthorized())
                return await client.PostAsJsonAsync("api/account/change-password", model);
        }



        internal static async Task<HttpResponseMessage> GetProduct(Guid id, string accessToken = "")
        {
            using (var client = await CreateHttpClientAuthorized(accessToken: accessToken))
                return await client.PostAsync(string.Format("api/token/{0}", id), null);
        }

        internal static async Task<HttpResponseMessage> GetModules(string accessToken = "")
        {
            using (var client = await CreateHttpClientAuthorized(accessToken: accessToken))
                return await client.GetAsync("api/account/modules");
        }

        internal static async Task<HttpResponseMessage> Auto(string accessToken = "")
        {
            using (var client = await CreateHttpClientAuthorized(accessToken: accessToken))
                return await client.PostAsync("api/token/auto", null);
        }

        internal static async Task<HttpResponseMessage> GetProducts(string accessToken = "")
        {
            using (var client = await CreateHttpClientAuthorized(accessToken: accessToken))
                return await client.GetAsync("api/account/products");
        }
    }
}
