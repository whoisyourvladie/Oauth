"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

angular.module('app.components', ['ui.router', 'pascalprecht.translate']);
angular.module('app.services', []);
angular.module('app.controllers', []);
angular.module('app.directives', []);
angular.module('app.filters', []);
angular.module('app.external', ['LocalStorageModule']); //angular-local-storage

angular.module('app', ['ui.router', 'app.components', 'app.services', 'app.controllers', 'app.directives', 'app.filters', 'app.external']).run(function ($trace, $transitions, $translate, $brand, $sso) {
  if (!$brand.validate()) return $brand.redirect(); //$trace.enable('TRANSITION');

  $transitions.onBefore({
    to: '**'
  }, function (transition) {
    var to = transition.to();
    if (to.name === 'account/logout' && $sso.logout()) document.body.style.display = 'none';
  }); //$transitions.onSuccess({ to: '**' }, (transition) => {
  //    let stateService = transition.router.stateService;
  //    let locale = stateService.params.locale || 'en';
  //    $translate.use(locale);
  //});
});
angular.module('app').config(['$httpProvider', function ($httpProvider) {
  $httpProvider.interceptors.push([function () {
    var interceptor = {};

    interceptor.response = function (response) {
      var config = response.config || {};
      if (config.asJson === true) return response.data;
      return response;
    };

    return interceptor;
  }]);
}]);
angular.module('app').config(['$translateProvider', '$translatePartialLoaderProvider', function ($translateProvider, $translatePartialLoaderProvider) {
  // // $translateProvider.useLoader('$i18nLoader', {});
  // // $translateProvider.useLocalStorage();
  $translateProvider.useLoader('$translatePartialLoader', {
    urlTemplate: 'i18n/{lang}.json'
  });
  $translateProvider.preferredLanguage('en');
  $translateProvider.fallbackLanguage('en');
  $translatePartialLoaderProvider.addPart('index');
}]);
angular.module('app').config(function ($stateProvider, $urlRouterProvider, localStorageServiceProvider) {
  localStorageServiceProvider.setPrefix('sso').setDefaultToCookie(false); // $locationProvider.html5Mode({
  //     enabled: true,
  //     requireBase: false
  // });

  $urlRouterProvider.otherwise('/en/index');
  $stateProvider.state('app', {
    url: '/:locale',
    //  url: '/:locale/{brand:sodapdf}',
    //templateUrl: 'index.html',
    restricted: false,
    abstract: true,
    views: {
      content: {
        controller: 'appController'
      },
      footer: {
        templateUrl: 'partial/footer.html',
        controller: 'partialFooterController'
      }
    }
  });

  var _state = function _state(json) {
    json.name = json.name || json.url;
    json.params = json.params || {};
    json.templateUrl = json.templateUrl || "views/".concat(json.url, ".html");
    json.isProtected = !!json.isProtected;
    var state = {
      parent: 'app',
      url: "/".concat(json.url),
      params: json.params,
      templateUrl: json.templateUrl,
      controller: "".concat(json.controller, "Controller"),
      isProtected: json.isProtected
    };
    $stateProvider.state(json.name, state);
  };

  _state({
    url: 'index',
    controller: 'index'
  });

  _state({
    url: 'account/error',
    controller: 'accountError'
  });

  _state({
    url: 'account/logout',
    controller: 'accountLogout'
  });

  _state({
    url: 'account/identifier',
    controller: 'accountIdentifier',
    params: {
      email: null
    }
  });

  _state({
    url: 'account/password',
    controller: 'accountPassword',
    params: {
      firstName: null,
      lastName: null,
      email: null
    }
  });

  _state({
    url: 'account/remove',
    controller: 'accountRemove'
  });

  _state({
    url: 'account/select',
    controller: 'accountSelect'
  });
});
angular.module('app.controllers').controller('appController', ['$scope', '$state', function ($scope, $state) {}]);
angular.module('app.controllers').controller('indexController', ['$state', '$storage', function ($state, $storage) {
  var accounts = $storage.getAccounts();
  if (accounts.length > 1) return $state.go('account/select');
  return $state.go('account/identifier', {
    email: accounts.length ? accounts[0].email : null
  });
}]);
angular.module('app.directives').directive('ngFocus', ['$window', function ($window) {
  return {
    restrict: 'A',
    link: function link(scope, element, attrs) {
      element.first().focus();
    }
  };
}]);
angular.module('app.directives').directive('ngLogo', ['$brand', function ($brand) {
  return {
    restrict: 'A',
    link: function link(scope, element, attrs) {
      var logo = $brand.logo();
      element.html("<img width=\"".concat(logo.width, "\" src=\"").concat(logo.src, "\">"));
    }
  };
}]);
angular.module('app.services').factory('$api', ['$http', '$brand', function ($http, $brand) {
  var _uri = function _uri(method) {
    return "".concat($brand.oauthLink(), "/").concat(method);
  };

  var _getConfig = function _getConfig() {
    return {
      asJson: true,
      isOauth: true
    };
  };

  var service = {};
  service.account = {
    get: function get(params) {
      var config = _getConfig();

      config.params = params;
      return $http.get(_uri('api/account/'), config);
    }
  };

  service.tokenJwt = function (data) {
    var config = _getConfig();

    return $http.post(_uri('api/token/jwt'), data, config);
  };

  return service;
}]);
angular.module('app.services').factory('$brand', ['$utils', '$location', function ($utils, $location) {
  var brandEnum = {
    sodaPdf: 'sodaPdf',
    pdfArchitect: 'pdfArchitect'
  };
  var _current = null;
  var _settings = {
    ssoLink: {},
    oauthLink: {}
  };
  _settings.ssoLink[brandEnum.sodaPdf] = 'https://sso.sodapdf.com';
  _settings.ssoLink[brandEnum.pdfArchitect] = 'https://sso.pdfarchitect.org';
  _settings.oauthLink[brandEnum.sodaPdf] = 'https://oauth.sodapdf.com';
  _settings.oauthLink[brandEnum.pdfArchitect] = 'https://oauth.pdfarchitect.org';

  var _getSettings = function _getSettings(key) {
    return _settings[key][service.current()];
  };

  var service = {};

  service.current = function () {
    return _current;
  };

  service.currentName = function () {
    switch (service.current()) {
      case brandEnum.sodaPdf:
        return 'Soda PDF';

      case brandEnum.pdfArchitect:
        return 'PDF Architect';

      default:
        return '';
    }
  };

  service.ssoLink = function () {
    return _getSettings('ssoLink');
  };

  service.oauthLink = function () {
    return _getSettings('oauthLink');
  };

  service.validate = function () {
    var query = $utils.query();
    var host = $location.host().toLowerCase();

    switch (host) {
      case 'localhost':
      case 'sso.sodapdf.com':
        _current = brandEnum.sodaPdf;
        break;

      case 'sso.pdfarchitect.org':
        _current = brandEnum.pdfArchitect;
        break;

      case 'sso.lulusoft.com':
        if (query.brand_id === '360002010612') _current = brandEnum.sodaPdf;
        _current = _current || brandEnum.pdfArchitect;
        return false;
    }

    return true;
  };

  service.redirect = function () {
    document.body.style.display = 'none';
    window.location = service.ssoLink() + document.location.search + document.location.hash;
  };

  service.logo = function () {
    switch (service.current()) {
      case brandEnum.sodaPdf:
        return {
          width: 120,
          src: 'https://www.sodapdf.com/images/logo.svg'
        };

      case brandEnum.pdfArchitect:
        return {
          width: 200,
          src: 'https://myaccount.pdfarchitect.org/images/logo.png'
        };

      default:
        return {};
    }
  };

  return service;
}]);
angular.module('app.services').factory('$form', function () {
  var service = {};

  service.submit = function (entity, form, callback) {
    if (form.$valid !== true) {
      angular.forEach(form, function (value, key) {
        if (_typeof(value) === 'object' && value.hasOwnProperty('$modelValue')) value.$setDirty();
      });
    }

    if (service.isReady(entity, form) === false) return;
    callback(form);
  };

  service.isReady = function (entity, form) {
    if (entity.isBusy === true || form.$valid !== true) return false;
    entity.isBusy = true;
    return true;
  };

  return service;
});
angular.module('app.services').factory('$sso', ['$location', '$utils', function ($location, $utils) {
  var service = {};

  service.signInJwt = function (json) {
    var query = $utils.query();
    query.return_to && (json.return_to = query.return_to);
    var location = "".concat(query.redirect_uri, "?").concat($utils.params(json));
    window.location = location;
  };

  service.logout = function () {
    var query = $utils.query();
    if (query.return_to) return !!(window.location = query.return_to);
  };

  return service;
}]);
angular.module('app.services').factory('$storage', ['localStorageService', function ($localStorageService) {
  var service = {};

  var _equalAccount = function _equalAccount(account1, account2) {
    var email1 = account1.email || '';
    var email2 = account2.email || '';
    return email1.toLowerCase() === email2.toLowerCase();
  };

  service.getAccounts = function () {
    if (!$localStorageService.isSupported) return [];
    return $localStorageService.get('accounts') || [];
  };

  service.addAccount = function (account) {
    if (!$localStorageService.isSupported) return;
    service.removeAccount(account);
    var accounts = service.getAccounts();
    accounts.unshift({
      firstName: account.firstName,
      lastName: account.lastName,
      email: account.email
    });
    $localStorageService.set('accounts', accounts);
  };

  service.removeAccount = function (account) {
    if (!$localStorageService.isSupported) return;
    var accounts = service.getAccounts();

    for (var index = 0; index < accounts.length; ++index) {
      if (_equalAccount(accounts[index], account)) accounts.splice(index--, 1);
    }

    ;
    $localStorageService.set('accounts', accounts);
  };

  function viewAccount(json) {
    this.firstName = json.firstName;
    this.lastName = json.lastName;
    this.email = json.email;
  }

  ;
  return service;
}]);
angular.module('app.services').factory('$utils', function () {
  var service = {};

  service.query = function (query) {
    var json = {};

    try {
      if (typeof query === 'undefined') query = document.location.search;
      var split = query.replace(/(^\?)/, '').split('&');

      for (var i = 0; i < split.length; ++i) {
        var item = split[i];
        var index = item.indexOf('=');
        if (index === -1) continue;
        var key = item.substring(0, index);
        var value = item.substr(index + 1).trim();
        json[key.toLowerCase()] = decodeURIComponent(value);
      }
    } catch (e) {}

    return json;
  };

  service.params = function (json) {
    var queryString = [];

    for (var key in json) {
      queryString.push(key.toLowerCase() + '=' + encodeURIComponent(json[key]));
    }

    return queryString.join('&');
  };

  service.hash = function (value) {
    var hash = 0;
    if (!value) return hash;

    for (var index = 0; index < value.length; index++) {
      hash = value.charCodeAt(index) + ((hash << 5) - hash);
    }

    return hash;
  };

  service.intToRgb = function (value) {
    var str = (value & 0x00FFFFFF).toString(16).toUpperCase();
    return '00000'.substring(0, 6 - str.length) + str;
  };

  service.stringToColor = function (value) {
    var hash = service.hash(value);
    var rgb = service.intToRgb(hash);
    return "#".concat(rgb);
  };

  return service;
});
angular.module('app.controllers').controller('accountErrorController', ['$scope', function ($scope) {}]);
angular.module('app.controllers').controller('accountIdentifierController', ['$scope', '$state', '$api', '$storage', '$form', '$brand', function ($scope, $state, $api, $storage, $form, $brand) {
  $scope.model = {
    email: $state.params.email || null
  };
  $scope.status = null;
  $scope.isBusy = false;
  $scope.subTitle = "with your ".concat($brand.currentName(), " account");
  $scope.errorNotFound = "Couldn't find your ".concat($brand.currentName(), " account");

  $scope.submit = function (form) {
    $scope.status = null;
    $scope.model.error = null;
    $form.submit($scope, form, function () {
      return $api.account.get({
        email: $scope.model.email
      }).then(function (json) {
        $storage.addAccount(json);
        $state.go('account/password', json);
      }, function (json) {
        if (json.status !== 404) return $state.go('account/error');
        $scope.status = 404;
      }).finally(function () {
        $scope.isBusy = false;
      });
    });
  };
}]);
angular.module('app.controllers').controller('accountPasswordController', ['$scope', '$state', '$utils', '$api', '$sso', '$form', function ($scope, $state, $utils, $api, $sso, $form) {
  var params = $state.params;
  if (!params.email) $state.go('index');
  $scope.model = {
    firstName: params.firstName,
    lastName: params.lastName,
    email: params.email
  };
  $scope.status = null;
  $scope.isBusy = false;

  $scope.getFirstChar = function () {
    var value = $scope.model.email || $scope.model.firstName || $scope.model.lastName || ' ';
    return value[0];
  };

  $scope.getColor = function (account) {
    return $utils.stringToColor($scope.model.email);
  };

  $scope.submit = function (form) {
    $scope.status = null;
    $scope.model.error = null;
    $form.submit($scope, form, function () {
      return $api.tokenJwt({
        email: $scope.model.email,
        password: $scope.model.password
      }).then($sso.signInJwt, function (json) {
        if (json.status !== 404) return $state.go('account/error');
        $scope.status = 404;
      }).finally(function () {
        $scope.isBusy = false;
      });
    });
  };
}]);
angular.module('app.controllers').controller('accountRemoveController', ['$scope', '$state', '$utils', '$storage', function ($scope, $state, $utils, $storage) {
  var accounts = $storage.getAccounts();
  if (!accounts.length) return $state.go('index');
  $scope.model = {
    accounts: accounts
  };

  $scope.remove = function (account) {
    $storage.removeAccount(account);
    $scope.model.accounts = $storage.getAccounts();
  };

  $scope.getFirstChar = function (account) {
    var value = account.email || account.firstName || account.lastName || ' ';
    return value[0];
  };

  $scope.getColor = function (account) {
    return $utils.stringToColor(account.email);
  };
}]);
angular.module('app.controllers').controller('accountSelectController', ['$scope', '$state', '$utils', '$storage', function ($scope, $state, $utils, $storage) {
  var accounts = $storage.getAccounts();
  if (!accounts.length) return $state.go('index');
  $scope.model = {
    accounts: accounts
  };

  $scope.select = function (account) {
    return $state.go('account/password', account);
  };

  $scope.getFirstChar = function (account) {
    var value = account.email || account.firstName || account.lastName || ' ';
    return value[0];
  };

  $scope.getColor = function (account) {
    return $utils.stringToColor(account.email);
  };
}]);
angular.module('app.controllers').controller('partialFooterController', ['$scope', '$state', '$brand', function ($scope, $state, $brand) {
  var _languages = {
    en: 'English',
    fr: 'Français',
    de: 'Deutsch‬'
  };
  $scope.$brand = $brand;
  $scope.model = {
    locale: $state.params.locale.toLowerCase()
  };

  $scope.currentLanguageTitle = function () {
    return _languages[$scope.model.locale];
  };

  $scope.changeLanguage = function (locale) {
    $scope.model.locale = locale;
    var url = $state.current.url.replace(/^\//gi, '');
    var params = angular.copy($state.params);
    params.locale = locale;
    $state.go(url, params);
  };
}]);