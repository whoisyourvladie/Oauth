using Microsoft.Owin.Security;
using SaaS.Api.Models.Oauth;
using SaaS.Api.Oauth.Providers;
using SaaS.Data.Entities.Accounts;
using SaaS.Data.Entities.Oauth;
using SaaS.Data.Entities.View;
using System;
using System.Collections.Specialized;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Web;

namespace SaaS.Api.Oauth
{
    internal static class OauthManager
    {
        internal static async Task<HttpResponseMessage> InternalSignIn(SignInViewModel model, Guid? visitorId = null)
        {
            var query = HttpUtility.ParseQueryString(string.Empty);

            query.Add("grant_type", model.GrantType);
            query.Add("client_id", model.ClientId);
            query.Add("client_version", model.ClientVersion);
            Add(query, "client_secret", model.ClientSecret);

            query.Add("username", model.UserName);
            query.Add("password", model.Password);

            Add(query, "scope", model.Scope);
            Add(query, "motherboardKey", model.MotherboardKey);
            Add(query, "physicalMac", model.PhysicalMac);
            Add(query, "machineKey", model.MachineKey);
            Add(query, "pcName", model.PcName);
            Add(query, "isAutogeneratedMachineKey", model.IsAutogeneratedMachineKey.ToString());
            Add(query, "externalClient", model.ExternalClient);

            if (model.InstallationID.HasValue)
                query.Add("installationID", model.InstallationID.Value.ToString("N"));

            if (visitorId.HasValue)
                query.Add("visitorId", visitorId.Value.ToString("N"));

            using (var client = new HttpClient())
            {
                client.DefaultRequestHeaders.Accept.Clear();

                client.BaseAddress = new Uri(HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority));

                var request = new HttpRequestMessage(HttpMethod.Post, "api/token");
                request.Content = new StringContent(query.ToString(), Encoding.UTF8, "application/x-www-form-urlencoded");

                return await client.SendAsync(request);
            }
        }
        private static void Add(NameValueCollection query, string key, string value)
        {
            if (!string.IsNullOrEmpty(value))
                query.Add(key, value);
        }

        internal static Guid UpdateTicket(Account user, SessionToken session, AuthenticationTicket ticket, ViewAccountProduct product, Client client)
        {
            var currentSessionId = session.Id;

            session.Id = Guid.NewGuid();

            var timeSpan = session.ExpiresUtc - session.IssuedUtc;

            var issued = DateTime.UtcNow;
            session.IssuedUtc = issued;
            session.ExpiresUtc = issued.Add(timeSpan);

            ticket.Properties.IssuedUtc = session.IssuedUtc;
            ticket.Properties.ExpiresUtc = session.ExpiresUtc;
            ticket.Properties.Dictionary["session"] = session.Id.ToString("N");

            ticket.Identity.AddClaims(user, client);

            session.ProtectedTicket = Startup.OAuthBearerOptions.AccessTokenFormat.Protect(ticket);
            session.AccountProductId = product.AccountProductId;

            return currentSessionId;
        }
        internal static dynamic ReleaseToken(SessionToken session, AuthenticationTicket ticket, object modules, object moduleFeatures, object activeProducts, Account user)
        {
            return new
            {
                access_token = session.ProtectedTicket,
                refresh_token = session.Id.ToString("N"),
                token_type = ticket.Identity.AuthenticationType,
                expires_in = (int)(ticket.Properties.ExpiresUtc - ticket.Properties.IssuedUtc).Value.TotalSeconds,
                externalClient = session.ExternalClientName,

                status = user.GetStatus(),
                email = user.Email,
                modules = modules,
                moduleFeatures = moduleFeatures,
                activeProducts = activeProducts,

                issued = ticket.Properties.IssuedUtc,
                expires = ticket.Properties.ExpiresUtc
            };
        }

        internal static int? GetExternalClientId(string value)
        {
            ExternalClient? externalClient = GetExternalClient(value);
            if (externalClient.HasValue)
                return (int)externalClient.Value;

            return null;
        }

        internal static ExternalClient? GetExternalClient(string value)
        {
            ExternalClient externalClient;
            if (Enum.TryParse(value, true, out externalClient))
                return externalClient;

            return null;
        }

        internal static string GetExternalClientName(ExternalClient externalClient)
        {
            return Enum.GetName(typeof(ExternalClient), externalClient);
        }
    }
}